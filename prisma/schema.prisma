generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  PREMIUM_USER
}

// Here Account means 
// The providers will give something in return to Catch

// Copied from Auth.js
model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  // This is a relation 
  // If User is deleted This accounts also deleted onDelete
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// User Schema 
model User {
  id       String    @id @default(cuid()) @map("_id")
  name     String?
  email    String    @unique
  image    String?
  accounts Account[]
  // This is for Role Base authentication System
  role     UserRole  @default(USER)

  myPlayground     Playground[]
  staredPlayground StarMark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Templates 

enum Templates {
  REACT
  NEXTJS
  EXPRESS
  VUE
  HONO
  ANGULAR
}

model Playground {
  id          String    @id @default(cuid()) @map("_id")
  title       String
  description String?
  template    Templates @default(REACT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  StarMark StarMark[]
  // todo template files
}

model StarMark {
  id           String     @id @default(cuid()) @map("_id")
  userId       String
  playgroundId String
  isMarked     Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  playground   Playground @relation(fields: [playgroundId], references: [id], onDelete: Cascade)

  @@unique([userId, playgroundId])
}
